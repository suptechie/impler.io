name: Publish Embed to Production

on:
  workflow_call:
    secrets:
      GH_PACKAGES:
        required: true
  workflow_dispatch:

jobs:
  build_embed:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    runs-on: ubuntu-latest
    timeout-minutes: 80
    permissions:
      contents: read
      packages: write 
      deployments: write
    steps:
      - uses: actions/checkout@v2
      - name: Setup kernel for react native, increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Build & Tag Docker image
        env:
          REGISTERY_OWNER: implerhq
          DOCKER_NAME: impler/embed
          IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          docker build -t ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:$IMAGE_TAG -f libs/embed/Dockerfile .
          docker tag ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:$IMAGE_TAG ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:latest
        
      - name: Run Docker container
        env:
          REGISTERY_OWNER: implerhq
          DOCKER_NAME: impler/embed
          IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
        run: docker run --network=host -dit ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:$IMAGE_TAG

      - name: Check application health
        run: |
          for i in {1..5}; do
            if curl --output /dev/null --silent --head --fail http://localhost:4701/embed.umd.min.js; then
              exit 0
            fi
            echo "Waiting for the application to start..."
            sleep 5
          done
          echo "Application failed to start"
          exit 1

      - name: Log in to GitHub Container Registry
        env:
          GH_ACTOR: implerhq
          GH_PASSWORD: ${{ secrets.GH_PACKAGES }}
        run: echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin
      
      - name: Push Docker image
        env:
          REGISTERY_OWNER: implerhq
          DOCKER_NAME: impler/embed
          IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          docker push ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          docker push ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:latest
          echo "::set-output name=IMAGE::ghcr.io/$REGISTERY_OWNER/$DOCKER_NAME:$IMAGE_TAG"

